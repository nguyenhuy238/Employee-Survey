@using Employee_Survey.Application
@using Employee_Survey.Domain
@model PagedResult<Question>

@{
    var f = new QuestionFilter
    {
        Keyword = Context.Request.Query["Keyword"],
        Skill = Context.Request.Query["Skill"],
        Difficulty = Context.Request.Query["Difficulty"],
        TagsCsv = Context.Request.Query["TagsCsv"],
        Page = int.TryParse(Context.Request.Query["Page"], out var p) ? p : 1,
        PageSize = int.TryParse(Context.Request.Query["PageSize"], out var s) ? s : 20
    };
}

<h2>Question Bank</h2>

<form method="get" class="row g-2 mb-2">
    <div class="col"><input name="Keyword" value="@f.Keyword" class="form-control" placeholder="Search content..." /></div>
    <div class="col">
        <select name="Type" class="form-select">
            <option value="">--Type--</option>
            @foreach (var t in Enum.GetNames(typeof(QType)))
            {
                <option value="@t" selected="@(Context.Request.Query["Type"] == t)">@t</option>
            }
        </select>
    </div>
    <div class="col"><input name="Skill" value="@f.Skill" class="form-control" placeholder="Skill" /></div>
    <div class="col"><input name="Difficulty" value="@f.Difficulty" class="form-control" placeholder="Difficulty" /></div>
    <div class="col"><input name="TagsCsv" value="@f.TagsCsv" class="form-control" placeholder="Tags (comma)" /></div>
    <div class="col-2"><button class="btn btn-primary w-100">Filter</button></div>
</form>

<div class="d-flex gap-2 mb-2">
    <a class="btn btn-success" href="/Questions/Create">Create</a>
    <a class="btn btn-outline-secondary" href="/Questions/ExportExcel">Export</a>
    <form asp-action="ImportExcel" method="post" enctype="multipart/form-data">
        <div class="input-group">
            <input type="file" name="file" class="form-control" accept=".xlsx,.xls" />
            <button class="btn btn-outline-primary">Import</button>
        </div>
    </form>
</div>

<table class="table table-striped">
    <thead><tr><th>Content</th><th>Type</th><th>Skill</th><th>Difficulty</th><th>Tags</th><th></th></tr></thead>
    <tbody>
        @foreach (var q in Model.Items)
        {
            <tr>
                <td>@q.Content</td>
                <td>@q.Type</td>
                <td>@q.Skill</td>
                <td>@q.Difficulty</td>
                <td>@string.Join(", ", q.Tags)</td>
                <td class="text-nowrap">
                    <a class="btn btn-sm btn-outline-primary" href="/Questions/Edit/@q.Id">Edit</a>
                    <form asp-action="Clone" method="post" class="d-inline">
                        <input type="hidden" name="id" value="@q.Id" /><button class="btn btn-sm btn-outline-secondary">Clone</button>
                    </form>
                    <form asp-action="Delete" method="post" class="d-inline" onsubmit="return confirm('Delete?')">
                        <input type="hidden" name="id" value="@q.Id" /><button class="btn btn-sm btn-outline-danger">Delete</button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var totalPages = (int)Math.Ceiling(Model.Total / (double)Model.PageSize);
}
<nav>
    <ul class="pagination">
        @for (int i = 1; i <= totalPages; i++)
        {
            var active = i == Model.Page ? "active" : "";
            <li class="page-item @active">
                <a class="page-link" href="@Context.Request.Path?@($"Page={i}&PageSize={Model.PageSize}&Keyword={f.Keyword}&Type={Context.Request.Query["Type"]}&Skill={f.Skill}&Difficulty={f.Difficulty}&TagsCsv={f.TagsCsv}")">@i</a>
            </li>
        }
    </ul>
</nav>
