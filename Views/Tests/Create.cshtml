@model Employee_Survey.Models.CreateTestViewModel
@using Employee_Survey.Domain

<h2>Create Test</h2>

<div class="alert alert-info">
    <i class="bi bi-info-circle"></i>
    <strong>Lưu ý:</strong> Bạn có thể <u>chọn thủ công</u> câu hỏi bằng checkbox bên dưới
    <em>(khi đó hệ thống sẽ không random)</em>. Nếu không chọn, đề sẽ sinh theo cấu hình random.
</div>

<!-- FORM GET: lọc/paging -->
<form method="get" class="d-flex align-items-center mb-2" style="gap:.5rem;">
    <input name="Keyword" value="@Model.Filter.Keyword" type="text" class="form-control" placeholder="Search keyword..." style="max-width: 220px;" />
    <select name="PageSize" class="form-select" style="max-width: 130px;">
        @{
            var sizes = new[] { 10, 20, 50, 100 };
            var current = Model.Filter.PageSize > 0 ? Model.Filter.PageSize : 20;
        }
        @foreach (var s in sizes)
        {
            <option value="@s" selected="@(current == s)">@s / page</option>
        }
        <option value="all" selected="@(Model.Filter.PageSize == int.MaxValue)">All</option>
    </select>

    <!-- NEW: carry left-form values across paging -->
    <input type="hidden" id="q_Title" name="Title" value="@Model.Title" />
    <input type="hidden" id="q_DurationMinutes" name="DurationMinutes" value="@Model.DurationMinutes" />
    <input type="hidden" id="q_PassScore" name="PassScore" value="@Model.PassScore" />
    <input type="hidden" id="q_SkillFilter" name="SkillFilter" value="@Model.SkillFilter" />
    <input type="hidden" id="q_RandomMCQ" name="RandomMCQ" value="@Model.RandomMCQ" />
    <input type="hidden" id="q_RandomTF" name="RandomTF" value="@Model.RandomTF" />
    <input type="hidden" id="q_RandomEssay" name="RandomEssay" value="@Model.RandomEssay" />

    <button class="btn btn-outline-secondary" type="submit">Apply</button>
</form>

<!-- FORM POST: lưu Test -->
<form method="post" asp-action="Create" id="createForm">
    @Html.AntiForgeryToken()

    <!-- hidden để nhét các lựa chọn từ localStorage khi submit -->
    <div id="persistedSelections"></div>

    <div class="row">
        <div class="col-md-5">
            <div class="mb-2">
                <label class="form-label">Title</label>
                <input name="Title" value="@Model.Title" class="form-control" />
            </div>
            <div class="mb-2">
                <label class="form-label">DurationMinutes</label>
                <input name="DurationMinutes" type="number" value="@Model.DurationMinutes" class="form-control" />
            </div>
            <div class="mb-2">
                <label class="form-label">PassScore</label>
                <input name="PassScore" type="number" value="@Model.PassScore" class="form-control" />
            </div>
            <div class="mb-2">
                <label class="form-label">SkillFilter (áp dụng cho random)</label>
                <input name="SkillFilter" value="@Model.SkillFilter" class="form-control" />
                <div class="form-text">Chỉ dùng khi bạn KHÔNG chọn thủ công câu hỏi.</div>
            </div>
            <div class="row g-2">
                <div class="col-4">
                    <label class="form-label">RandomMCQ</label>
                    <input name="RandomMCQ" type="number" value="@Model.RandomMCQ" class="form-control" />
                </div>
                <div class="col-4">
                    <label class="form-label">RandomTF</label>
                    <input name="RandomTF" type="number" value="@Model.RandomTF" class="form-control" />
                </div>
                <div class="col-4">
                    <label class="form-label">RandomEssay</label>
                    <input name="RandomEssay" type="number" value="@Model.RandomEssay" class="form-control" />
                </div>
            </div>

            <div class="mt-3 d-flex align-items-center gap-2">
                <button class="btn btn-primary" id="btnSaveCreate">Save</button>
                <span class="small text-muted">Đã chọn: <span id="selectedCount">0</span> câu hỏi.</span>
            </div>

            <div class="text-danger mt-2">
                @Html.ValidationSummary()
            </div>
        </div>

        <div class="col-md-7">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#tab-mcq" type="button" role="tab">
                        MCQ (@Model.MCQQuestions.Count)
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab-tf" type="button" role="tab">
                        True/False (@Model.TFQuestions.Count)
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab-essay" type="button" role="tab">
                        Essay (@Model.EssayQuestions.Count)
                    </button>
                </li>
                <!-- NEW tabs -->
                <li class="nav-item" role="presentation">
                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab-matching" type="button" role="tab">
                        Matching (@Model.MatchingQuestions.Count)
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab-drag" type="button" role="tab">
                        Drag & Drop (@Model.DragDropQuestions.Count)
                    </button>
                </li>
            </ul>

            <div class="tab-content border border-top-0 p-2" style="max-height: 520px; overflow:auto;">
                <div class="tab-pane fade show active" id="tab-mcq" role="tabpanel">
                    <partial name="_QuestionTablePartial"
                             model="(IEnumerable<Employee_Survey.Domain.Question>)Model.MCQQuestions"
                             view-data='new ViewDataDictionary(ViewData) { { "Selected", Model.SelectedQuestionIds } }' />
                </div>
                <div class="tab-pane fade" id="tab-tf" role="tabpanel">
                    <partial name="_QuestionTablePartial"
                             model="(IEnumerable<Employee_Survey.Domain.Question>)Model.TFQuestions"
                             view-data='new ViewDataDictionary(ViewData) { { "Selected", Model.SelectedQuestionIds } }' />
                </div>
                <div class="tab-pane fade" id="tab-essay" role="tabpanel">
                    <partial name="_QuestionTablePartial"
                             model="(IEnumerable<Employee_Survey.Domain.Question>)Model.EssayQuestions"
                             view-data='new ViewDataDictionary(ViewData) { { "Selected", Model.SelectedQuestionIds } }' />
                </div>
                <div class="tab-pane fade" id="tab-matching" role="tabpanel">
                    <partial name="_QuestionTablePartial"
                             model="(IEnumerable<Employee_Survey.Domain.Question>)Model.MatchingQuestions"
                             view-data='new ViewDataDictionary(ViewData) { { "Selected", Model.SelectedQuestionIds } }' />
                </div>
                <div class="tab-pane fade" id="tab-drag" role="tabpanel">
                    <partial name="_QuestionTablePartial"
                             model="(IEnumerable<Employee_Survey.Domain.Question>)Model.DragDropQuestions"
                             view-data='new ViewDataDictionary(ViewData) { { "Selected", Model.SelectedQuestionIds } }' />
                </div>
            </div>

            <div class="d-flex justify-content-between align-items-center mt-2">
                <div class="small text-muted">Tổng đã chọn: <span id="selectedCountBottom">0</span></div>
                <partial name="_Pager" model="Model.Page" />
            </div>
        </div>
    </div>
</form>

@section Scripts {
    <script>
        // ===== SYNC left form -> hidden (GET form) & patch pager links =====
        (function(){
          const map = {
            Title:           {src:'input[name="Title"]',            hid:'#q_Title'},
            DurationMinutes: {src:'input[name="DurationMinutes"]',  hid:'#q_DurationMinutes'},
            PassScore:       {src:'input[name="PassScore"]',        hid:'#q_PassScore'},
            SkillFilter:     {src:'input[name="SkillFilter"]',      hid:'#q_SkillFilter'},
            RandomMCQ:       {src:'input[name="RandomMCQ"]',        hid:'#q_RandomMCQ'},
            RandomTF:        {src:'input[name="RandomTF"]',         hid:'#q_RandomTF'},
            RandomEssay:     {src:'input[name="RandomEssay"]',      hid:'#q_RandomEssay'}
          };

          function syncHidden(){
            Object.values(map).forEach(m=>{
              const src = document.querySelector(m.src);
              const hid = document.querySelector(m.hid);
              if (src && hid) hid.value = src.value;
            });
          }

          function patchPagerLinks(){
            const getForm = document.querySelector('form[method="get"]');
            if (!getForm) return;
            const params = new URLSearchParams(new FormData(getForm));
            document.querySelectorAll('a[href*="Page="], a[href*="page="]').forEach(a=>{
              try{
                const url = new URL(a.getAttribute('href'), window.location.origin);
                params.forEach((v,k)=> url.searchParams.set(k,v));
                a.setAttribute('href', url.pathname + '?' + url.searchParams.toString());
              }catch{}
            });
          }

          // init
          syncHidden(); patchPagerLinks();

          // react to changes
          Object.values(map).forEach(m=>{
            const src = document.querySelector(m.src);
            if (src){
              src.addEventListener('input', ()=>{ syncHidden(); patchPagerLinks(); });
              src.addEventListener('change', ()=>{ syncHidden(); patchPagerLinks(); });
            }
          });
          document.querySelector('select[name="PageSize"]')?.addEventListener('change', patchPagerLinks);
          document.querySelector('input[name="Keyword"]')?.addEventListener('input', patchPagerLinks);
        })();

        // ===== Persist selection via localStorage =====
        const LS_KEY = "tests_create_selected_ids";
        function getSel(){ try { return JSON.parse(localStorage.getItem(LS_KEY) || "[]"); } catch { return []; } }
        function setSel(arr){ localStorage.setItem(LS_KEY, JSON.stringify(Array.from(new Set(arr)))); updateSelectedCount(); }
        function updateSelectedCount(){
          const n = getSel().length;
          const el1 = document.getElementById('selectedCount');
          const el2 = document.getElementById('selectedCountBottom');
          if (el1) el1.innerText = n;
          if (el2) el2.innerText = n;
        }
        function applyFromStorageToDOM(){
          const set = new Set(getSel());
          document.querySelectorAll('input[name="SelectedQuestionIds"]').forEach(cb => { cb.checked = set.has(cb.value); });
        }
        function injectHiddenInputs(){
          const holder = document.getElementById('persistedSelections'); holder.innerHTML = '';
          getSel().forEach(id => {
            const i = document.createElement('input'); i.type='hidden'; i.name='SelectedQuestionIds'; i.value=id; holder.appendChild(i);
          });
        }

        document.addEventListener('change', function(e){
          if (e.target && e.target.name === 'SelectedQuestionIds') {
            const list = getSel();
            if (e.target.checked) setSel([...list, e.target.value]);
            else setSel(list.filter(x => x !== e.target.value));
          }
        });

        applyFromStorageToDOM(); updateSelectedCount();
        document.getElementById('btnSaveCreate')?.addEventListener('click', injectHiddenInputs);
    </script>
}
