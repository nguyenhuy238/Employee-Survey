@model Employee_Survey.Models.CreateTestViewModel
@using Employee_Survey.Domain

<h2>Create Test</h2>

<div class="alert alert-info">
    <i class="bi bi-info-circle"></i>
    <strong>Lưu ý:</strong> Bạn có thể <u>chọn thủ công</u> câu hỏi bằng checkbox bên dưới
    <em>(khi đó hệ thống sẽ không random)</em>. Nếu không chọn, đề sẽ sinh theo cấu hình random.
</div>

<!-- FORM GET: lọc/paging (tách riêng, không lồng vào POST) -->
<form method="get" class="d-flex align-items-center mb-2" style="gap:.5rem;">
    <input name="Keyword" value="@Model.Filter.Keyword" type="text" class="form-control" placeholder="Search keyword..." style="max-width: 220px;" />
    <select name="PageSize" class="form-select" style="max-width: 110px;">
        @{
            var sizes = new[] { 10, 20, 50, 100 };
            var current = Model.Filter.PageSize > 0 ? Model.Filter.PageSize : 20;
        }
        @foreach (var s in sizes)
        {
            <option value="@s" selected="@(current == s)">@s / page</option>
        }
    </select>
    <button class="btn btn-outline-secondary" type="submit">Apply</button>
</form>

<!-- FORM POST: lưu Test -->
<form method="post" asp-action="Create">
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-md-5">
            <div class="mb-2">
                <label class="form-label">Title</label>
                <input name="Title" value="@Model.Title" class="form-control" />
            </div>
            <div class="mb-2">
                <label class="form-label">DurationMinutes</label>
                <input name="DurationMinutes" type="number" value="@Model.DurationMinutes" class="form-control" />
            </div>
            <div class="mb-2">
                <label class="form-label">PassScore</label>
                <input name="PassScore" type="number" value="@Model.PassScore" class="form-control" />
            </div>
            <div class="mb-2">
                <label class="form-label">SkillFilter (áp dụng cho random)</label>
                <input name="SkillFilter" value="@Model.SkillFilter" class="form-control" />
                <div class="form-text">Chỉ dùng khi bạn KHÔNG chọn thủ công câu hỏi.</div>
            </div>
            <div class="row g-2">
                <div class="col-4">
                    <label class="form-label">RandomMCQ</label>
                    <input name="RandomMCQ" type="number" value="@Model.RandomMCQ" class="form-control" />
                </div>
                <div class="col-4">
                    <label class="form-label">RandomTF</label>
                    <input name="RandomTF" type="number" value="@Model.RandomTF" class="form-control" />
                </div>
                <div class="col-4">
                    <label class="form-label">RandomEssay</label>
                    <input name="RandomEssay" type="number" value="@Model.RandomEssay" class="form-control" />
                </div>
            </div>

            <div class="mt-3">
                <button class="btn btn-primary">Save</button>
            </div>

            <div class="text-danger mt-2">
                @Html.ValidationSummary()
            </div>
        </div>

        <div class="col-md-7">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#tab-mcq" type="button" role="tab">
                        MCQ (@Model.MCQQuestions.Count)
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab-tf" type="button" role="tab">
                        True/False (@Model.TFQuestions.Count)
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab-essay" type="button" role="tab">
                        Essay (@Model.EssayQuestions.Count)
                    </button>
                </li>
            </ul>

            <div class="tab-content border border-top-0 p-2" style="max-height: 520px; overflow:auto;">
                <div class="tab-pane fade show active" id="tab-mcq" role="tabpanel">
                    <partial name="_QuestionTablePartial"
                             model="(IEnumerable<Employee_Survey.Domain.Question>)Model.MCQQuestions"
                             view-data='new ViewDataDictionary(ViewData) { { "Selected", Model.SelectedQuestionIds } }' />
                </div>
                <div class="tab-pane fade" id="tab-tf" role="tabpanel">
                    <partial name="_QuestionTablePartial"
                             model="(IEnumerable<Employee_Survey.Domain.Question>)Model.TFQuestions"
                             view-data='new ViewDataDictionary(ViewData) { { "Selected", Model.SelectedQuestionIds } }' />
                </div>
                <div class="tab-pane fade" id="tab-essay" role="tabpanel">
                    <partial name="_QuestionTablePartial"
                             model="(IEnumerable<Employee_Survey.Domain.Question>)Model.EssayQuestions"
                             view-data='new ViewDataDictionary(ViewData) { { "Selected", Model.SelectedQuestionIds } }' />
                </div>
            </div>

            <div class="d-flex justify-content-between align-items-center mt-2">
                <div class="small text-muted">Đã chọn: <span id="selectedCount">0</span> câu hỏi.</div>
                <partial name="_Pager" model="Model.Page" />
            </div>
        </div>
    </div>
</form>

@section Scripts {
    <script>
        function updateSelectedCount(){
            const cbs = document.querySelectorAll('input[name="SelectedQuestionIds"]:checked');
            const el = document.getElementById('selectedCount');
            if (el) el.innerText = cbs.length;
        }
        document.addEventListener('change', function(e){
            if(e.target && e.target.name === 'SelectedQuestionIds') updateSelectedCount();
        });
        updateSelectedCount();
    </script>
}
